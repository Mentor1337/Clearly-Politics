name: Update Dashboard Data

on:
  # Run daily at 8 AM UTC
  schedule:
    - cron: '0 8 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
  
  # Run on push to main (for testing)
  push:
    branches: [ main ]
    paths: 
      - 'scripts/**'
      - '.github/workflows/**'

jobs:
  collect-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm ci
        else
          npm init -y
          npm install axios cheerio
        fi
    
    - name: Create data directories
      run: |
        mkdir -p data/raw
        mkdir -p data/processed
        mkdir -p data/sources
    
    - name: Collect data
      run: node scripts/collect-data.js
      env:
        # Add API keys as GitHub secrets
        CENSUS_API_KEY: ${{ secrets.CENSUS_API_KEY }}
        FBI_API_KEY: ${{ secrets.FBI_API_KEY }}
        
    - name: Validate data
      run: |
        # Check if data files were created
        if [ ! -f "data/processed/latest.json" ]; then
          echo "‚ùå Data collection failed - latest.json not found"
          exit 1
        fi
        
        # Basic JSON validation
        node -e "
          const fs = require('fs');
          try {
            const data = JSON.parse(fs.readFileSync('data/processed/latest.json', 'utf8'));
            console.log('‚úÖ Data validation successful');
            console.log('üìä Records processed:', Object.keys(data).length);
          } catch (error) {
            console.error('‚ùå Invalid JSON data:', error);
            process.exit(1);
          }
        "
    
    - name: Update timestamp in index.html
      run: |
        # Update last updated timestamp in the main dashboard
        sed -i "s/Last updated: [^<]*/Last updated: $(date -u +'%Y-%m-%d %H:%M UTC')/" index.html
    
    - name: Generate data summary
      run: |
        # Create a summary of the data update
        node -e "
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('data/processed/latest.json', 'utf8'));
          const summary = {
            timestamp: new Date().toISOString(),
            dataPoints: Object.keys(data).length,
            lastUpdate: data.metadata?.processedAt || 'unknown'
          };
          fs.writeFileSync('data/update-summary.json', JSON.stringify(summary, null, 2));
          console.log('üìã Data summary generated');
        "
    
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GHUB_TOKEN }}
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git add data/ index.html        # Only commit if there are changes
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è No data changes detected"
        else
          git commit -m "üìä Automated data update - $(date -u +'%Y-%m-%d %H:%M UTC')"
          git push
          echo "‚úÖ Data updated and pushed"
        fi
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GHUB_TOKEN }}
        publish_dir: ./
        exclude_assets: 'scripts/,data/raw/,.github/'
    
    - name: Create release on major updates
      if: github.event_name == 'schedule' && github.ref == 'refs/heads/main'
      run: |
        # Create weekly releases with data snapshots
        WEEK=$(date -u +'%Y-W%U')
        if ! git tag -l | grep -q "$WEEK"; then
          git tag -a "data-$WEEK" -m "Weekly data snapshot for week $WEEK"
          git push origin "data-$WEEK"
          echo "üè∑Ô∏è Created weekly data tag: data-$WEEK"
        fi
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Workflow failed. Check the logs for details."
        # Here you could add Slack/Discord/email notifications
    
    - name: Performance metrics
      run: |
        # Log some basic metrics about the update
        echo "üìà Workflow Performance Metrics:"
        echo "- Start time: ${{ github.event.created_at }}"
        echo "- Data files size: $(du -sh data/ | cut -f1)"
        echo "- Processing time: $(($(date +%s) - $(date -d '${{ github.event.created_at }}' +%s))) seconds"

  # Separate job for data validation and quality checks
  data-quality-check:
    runs-on: ubuntu-latest
    needs: collect-and-deploy
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Run data quality checks
      run: |
        node -e "
          const fs = require('fs');
          
          try {
            const data = JSON.parse(fs.readFileSync('data/processed/latest.json', 'utf8'));
            let issues = [];
            
            // Check for required fields
            const requiredFields = ['gunViolenceByPolitics', 'politicalViolenceBreakdown'];
            requiredFields.forEach(field => {
              if (!data[field]) {
                issues.push(\`Missing required field: \${field}\`);
              }
            });
            
            // Check data freshness (within last 7 days)
            if (data.metadata?.processedAt) {
              const processedDate = new Date(data.metadata.processedAt);
              const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
              
              if (processedDate < weekAgo) {
                issues.push('Data appears stale (older than 7 days)');
              }
            }
            
            // Check for reasonable data ranges
            if (data.gunViolenceByPolitics) {
              const rates = [
                data.gunViolenceByPolitics.red?.rate,
                data.gunViolenceByPolitics.blue?.rate
              ].filter(Boolean);
              
              if (rates.some(rate => rate < 0 || rate > 1000)) {
                issues.push('Gun violence rates outside expected range');
              }
            }
            
            if (issues.length > 0) {
              console.error('‚ùå Data quality issues found:');
              issues.forEach(issue => console.error('  -', issue));
              process.exit(1);
            } else {
              console.log('‚úÖ Data quality checks passed');
            }
            
          } catch (error) {
            console.error('‚ùå Data quality check failed:', error);
            process.exit(1);
          }
        "

  # Security scan for sensitive data
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Scan for sensitive data
      run: |
        # Check for API keys, tokens, or other sensitive data
        echo "üîç Scanning for sensitive data..."
        
        PATTERNS=(
          "api[_-]?key\s*=\s*['\"][^'\"]+['\"]"
          "token\s*=\s*['\"][^'\"]+['\"]"
          "password\s*=\s*['\"][^'\"]+['\"]"
          "[A-Za-z0-9+/]{40,}"
        )
        
        for pattern in "${PATTERNS[@]}"; do
          if grep -r -i -E "$pattern" . --exclude-dir=.git --exclude-dir=node_modules; then
            echo "‚ö†Ô∏è Potential sensitive data found with pattern: $pattern"
          fi
        done
        
        echo "‚úÖ Security scan completed"